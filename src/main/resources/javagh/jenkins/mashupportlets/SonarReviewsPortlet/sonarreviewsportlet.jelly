<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" 
	    xmlns:l="/lib/layout" xmlns:t="/lib/hudson"
      xmlns:dp="/hudson/plugins/view/dashboard">

<style>
td.sTableTop { vertical-align: top; }
.sMessage { white-space: normal; }
#sonarReviewsTable TH { text-align: left; }
</style>

<div id="${it.divId}" align="left"><img src="${rootURL}/plugin/mashup-portlets-plugin/ajax-loader-bar.gif"/></div>

<st:include page="console-ie-fallback-js.jelly"/>

<st:bind var="mashupPlugin_${it.id}" value="${it}"/>
<script type="text/javascript"><![CDATA[

new function(divId, rootUrl, ajaxViaJenkins, sonarBaseUrl, limitToProjects, limitToStatus, maxEntries, displayMode, prioValueByName) {

	var divSelect = "#" + divId;	  
	var loaderImgSrc = rootUrl+'/plugin/mashup-portlets-plugin/ajax-loader-bar.gif';
	var sonarReviewDetailUrl = sonarBaseUrl  + '/project_reviews/view/';
	var sonarReviewListUrl = sonarBaseUrl  + '/reviews';
	
	var UNASSIGNED = "Unassigned";
	
	var sonarReviewAjaxUrl = sonarBaseUrl+'/api/reviews.json?statuses='+limitToStatus.join(',')+'&projects='+limitToProjects.join(',');
	console.log('sonarReviewAjaxUrl =', sonarReviewAjaxUrl);

	function getPrioHtmlImg(prio) {
	      var imgHtml = '<img src="'+sonarBaseUrl+'/images/priority/'+prioValueByName[prio]+'.png" border="0" alt="'+prio+'"/>';
	      return imgHtml;        
	}
	function getStatusHtmlImage(status) {
	      var imgHtml = '<img src="'+sonarBaseUrl+'/images/status/'+status+'.png" border="0" alt="'+status+'"/>';
	      return imgHtml;        
	}
	
	function reviewItemsComparator(reviewA, reviewB) {
	      var prioA = prioValueByName[reviewA.severity]; 
	      var prioB = prioValueByName[reviewB.severity];
	      return prioB - prioA;        
	}
	
	function createReviewsLinkForAssignee(assignee) {
          var link = sonarReviewListUrl + "?false_positives=without";
          if(assignee != UNASSIGNED) {
          	link += "&assignee_login="+assignee;
          }		          
          Q.each(limitToStatus, function(index, value) {
          	link += "&statuses[]="+value;
          });
          Q.each(limitToProjects, function(index, value) {
          	link += "&projects[]="+value;
          }); 
          return link;
	}	
	
	function renderDisplayModeCountsByUser(resp) {
	      var reviewItems = resp.responseObject();
	      
	      Q(divSelect).html(""); // clear div
        
	      if(reviewItems && reviewItems.length > 0) { 
	      
		      // group items 
		      var reviewCountByUser = new Object();		      
		      Q.each(reviewItems , function(indexInArray, reviewItem) {
		          // console.log('reviewItem=', reviewItem);
		          var assignee = reviewItem.assignee ? reviewItem.assignee : UNASSIGNED;
		          if(!(assignee in reviewCountByUser)) {
		          	reviewCountByUser[assignee] = new Object();
		          	reviewCountByUser[assignee].count = 0;
		          	reviewCountByUser[assignee].assignee = assignee;
		          }
		          reviewCountByUser[assignee].count = reviewCountByUser[assignee].count + 1;
		                    
			  });

			  // put assignee objects in array and sort array
			  var assigneeObjects = [];
		      Q.each(reviewCountByUser, function(assignee, assigneeObject) {
		          assigneeObjects.push(assigneeObject);
			  });			
			  assigneeObjects.sort(function(assigneeA, assigneeB) { return assigneeB.count-assigneeA.count; });
			  
			  
			  // render result
		      Q.each(assigneeObjects, function(index, assigneeObject) {
		          console.log('count '+assigneeObject.assignee+"="+assigneeObject.count);
		          assigneeObject.link = createReviewsLinkForAssignee(assigneeObject.assignee);
		          Q(divSelect).append("<a target='_blank' href='"+assigneeObject.link+"'>" + assigneeObject.assignee + "</a> ("+assigneeObject.count+") ");
		          if(index == maxEntries-1) {
			     	return false;
		          }		          
			  });			  
			  
			  
	      } else {
	      	  Q(divSelect+' tbody').append("><i>No reviews found.</i>");
	      }         
        
	}	
	
	function renderDisplayModeCompleteList(resp) {
	      var reviewItems = resp.responseObject();

	      Q(divSelect).html("<div style='padding: 5px 10px 5px 10px;'><table id='sonarReviewsTable'  class='pane bigtable' style='white-space:normal;'><tbody>"
	      				+"<tr><th>Prio</th><th width='80%'>Title</th><th>Status</th><th>Assignee</th></tr></tbody></table></div>");
	
	      if(reviewItems && reviewItems.length > 0) { 
		      reviewItems.sort(reviewItemsComparator);
	      
		      Q.each(reviewItems , function(indexInArray, reviewItem) {
		          // console.log('reviewItem=', reviewItem);
		          var assignee = reviewItem.assignee ? reviewItem.assignee : UNASSIGNED;
		          var linkReviewsOfAssignee = createReviewsLinkForAssignee(assignee);
		          var message = reviewItem.title;
		          // remove long java package paths in message
		          message = message.replace(/\b([a-z]+\.)+([A-Za-z0-9]+)/g, "$$2");		          
		          
		          Q(divSelect+' tbody').append("<tr><td>"+getPrioHtmlImg(reviewItem.severity)+"</td><td><a href='"+sonarReviewDetailUrl + reviewItem.id +"' target='_blank'>"+message+"</a></td><td>"+getStatusHtmlImage(reviewItem.status)+"</td><td><a target='_blank' href='"+linkReviewsOfAssignee+"'>"+assignee +"</a></td></tr>"); 
		          if(indexInArray == maxEntries-1) {
			     	return false;
		          }			      	
			  });
		      
	      } else {
	      	  Q(divSelect+' tbody').append("<tr><td align='center' colspan='20'><i>No reviews found.</i></td></tr>");
	      }        
	}
	

	ajaxViaJenkins(sonarReviewAjaxUrl, function(resp) {
		var text = resp.responseText;
	    if(text.substring(0,5) == 'ERROR') {
	      	Q(divSelect).html(text);
	      	return;
	    } 
	    // render with correct view function
	    var displayFunction = (displayMode == "completeList") ? renderDisplayModeCompleteList : renderDisplayModeCountsByUser;	   
	    displayFunction(resp);    		
	}); 	
	
]]>

}('${it.divId}', 
	'${rootURL}', 
	mashupPlugin_${it.id}.ajaxViaJenkins,
	'${it.sonarBaseUrl}',
	${it.limitToProjectsJson},
	${it.limitToStatusJson},
	${it.maxEntries},
	'${it.displayMode}',
	${it.priorityValueByNameJson}
);

</script>

</j:jelly>
